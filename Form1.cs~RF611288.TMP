using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace テトリス
{
    public partial class Form1 : Form
    {
        const int NUM_COLORS = 8;
        const int LENGTH = 20;
        const int AREA_WIDTH = 10;
        const int AREA_HEIGHT = 20;
        int rotation;
        int pattern;
        Block[] blocks;

        Bitmap bitmap;
        Rectangle[] srcRect;
        Rectangle[,] destRect;
        #region 長ブロック
        Block block1 = new Block(new Point[,]{{ new Point(-1, 0), new Point(0, 0), new Point(1, 0), new Point(2, 0) },
                                                { new Point(0, -2), new Point(0, -1), new Point(0, 0), new Point(0, 1) }}, 1);

        #endregion

        #region L字ブロック
        Block block2 = new Block(new Point[,]{{ new Point(1, 0), new Point(0, 0), new Point(0, -1), new Point(0, -2) },
                                                { new Point(0, 1), new Point(0, 0), new Point(-1, 0), new Point(-2, 0) },
                                                { new Point(1, 0), new Point(0, 0), new Point(0, 1), new Point(0, -2) },
                                                { new Point(0, 1), new Point(0, 0), new Point(1, 0), new Point(2, 0) }}, 5
            );

        #endregion

        #region 逆L字ブロック

        Block block3 = new Block(new Point[,]{  { new Point(0, 1), new Point(0, 0), new Point(0, 1), new Point(0, 2) },
                                                { new Point(0, -1), new Point(0, 0), new Point(-1, 0), new Point(-2, 0) },
                                                { new Point(1, 0), new Point(0, 0), new Point(0, -1), new Point(0, -2) },
                                                { new Point(0, 1), new Point(0, 0), new Point(0, 1), new Point(0, 2) }}, 1);

        #endregion

        #region 四角ブロック

        Block block4 = new Block(new Point[,] { { new Point(1, 0), new Point(0, 0), new Point(0, 1), new Point(-1, -1) } }, 1);

        #endregion

        #region 凸型ブロック

        Block block5 = new Block(new Point[,]{{ new Point(-1, 0), new Point(0, 0), new Point(0, 1), new Point(1, 0) },
                                                { new Point(0, -1), new Point(0, 0), new Point(1, 0), new Point(0, 1) },
                                                { new Point(-1, 0), new Point(0, 0), new Point(0, 1), new Point(1, 0) },
                                                { new Point(0, -1), new Point(0, 0), new Point(-1, 0), new Point(0, -1) }}, 1);

        #endregion

        #region カギ型ブロック

        Block block6 = new Block(new Point[,]{{ new Point(1, 0), new Point(0, 0), new Point(0, 1), new Point(-1, 1) },
                                                { new Point(0, 1), new Point(0, 0), new Point(1, 0), new Point(1, -1) }}, 1);

        #endregion

        #region 逆カギ型ブロック

        Block block7 = new Block(new Point[,]{{ new Point(-1, 0), new Point(0, 0), new Point(0, 1), new Point(1, 1) },
                                                { new Point(0, -1), new Point(0, 0), new Point(1, 0), new Point(1, -1) }}, 1);

        #endregion


        class Block
        {
            public Point[,] points;
            public int color; // 1:水色 2:黄色 3:青 4:赤5:橙 6:緑 7:紫

            public Block(Point[,] ps, int c)
            {
                points = ps;
                color = c;
            }
        }
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

            #region 画像データ読み込み
            srcRect = new Rectangle[8];
            destRect = new Rectangle[10, 20];
            bitmap = new Bitmap("Tetris.bmp");

            for (int i = 0; i < srcRect.Length; i++)
            {
                srcRect[i] = new Rectangle(LENGTH*i,0, LENGTH, LENGTH);
            }

            for (int y = 0; y < 20; y++)
            {
                for (int x = 0; x < 10; x++)
                {
                    destRect[x,y] = new Rectangle(x*LENGTH,y*LENGTH,LENGTH,LENGTH);
                }
            }

            #endregion

            rotation = 0;

            pattern = 0;
            blocks = new Block[] { block1, block2, block3, block4, block5, block6, block7 };

        }

        protected override void OnPaint(PaintEventArgs e)
        {
            Point center = new Point(3, 2);

            for (int i = 0; i < block1.points.GetLength(1); i++)
            {
                int x = center.X + blocks[pattern].points[rotation, i].X;
                int y = center.Y + blocks[pattern].points[rotation, i].Y;

                e.Graphics.DrawImage(bitmap, destRect[x, y], srcRect[blocks[pattern].color], GraphicsUnit.Pixel);

            }



        }

        protected override void OnKeyUp(KeyEventArgs e)
        {
            switch(e.KeyData)
            {
                case Keys.Z:

                    rotation = rotation + 1;
                    if (rotation == block1.points.GetLength(0))
                    {
                        rotation = 0;
                    }
                        break;


                case Keys.X:
                    rotation = rotation +1;
                    if (rotation == block1.points.GetLength(0))
                    {
                        rotation =0;
                    }
                        break;

                case Keys.C:
                    pattern = pattern + 1;
                    if (rotation == pattern)
                    {
                        pattern = 0;
                    }
                    rotation = 0;
                    break;

            }
            Invalidate();
                    
        }
    }
}
